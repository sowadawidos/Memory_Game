{"ast":null,"code":"var _jsxFileName = \"/Users/dawidsowinski/Desktop/KursCoderslab/Memory_Game/memory_game/src/components/GameBoard/GameBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./GameBoard.scss\";\nimport { Card } from \"../Card/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const GameBoard = ({\n  setPoints\n}) => {\n  _s();\n\n  const figures = [{\n    figure: \"😇\",\n    id: 1\n  }, {\n    figure: \"😡\",\n    id: 2\n  }, {\n    figure: \"🤡\",\n    id: 3\n  }, {\n    figure: \"👻\",\n    id: 4\n  }, {\n    figure: \"🐵\",\n    id: 5\n  }, {\n    figure: \"🐹\",\n    id: 6\n  }, {\n    figure: \"🐯\",\n    id: 7\n  }, {\n    figure: \"🦧\",\n    id: 8\n  }, {\n    figure: \"🐍\",\n    id: 9\n  }];\n  const figuresArr = figures.concat(figures);\n  console.log(figuresArr);\n  const [index, setIndex] = useState([]);\n\n  const getID = index => {\n    setIndex(prev => [...prev, index]);\n  };\n\n  useEffect(() => {\n    if (index && index.length === 2) {\n      setTimeout(() => {\n        setIndex([]);\n      }, 3500);\n\n      if (index[0] === index[1]) {\n        setPoints(prev => prev + 1);\n      }\n    }\n  }, [index]);\n  console.log(index);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game__board\",\n      children: figuresArr.map(figure => /*#__PURE__*/_jsxDEV(Card, {\n        card: figure,\n        getID: getID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 46\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(GameBoard, \"YWbgaWBW/dLq2CNwOZ/ewDL3Vww=\");\n\n_c = GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/dawidsowinski/Desktop/KursCoderslab/Memory_Game/memory_game/src/components/GameBoard/GameBoard.js"],"names":["React","useState","useEffect","Card","GameBoard","setPoints","figures","figure","id","figuresArr","concat","console","log","index","setIndex","getID","prev","length","setTimeout","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,kBAAP;AACA,SAAQC,IAAR,QAAmB,cAAnB;;;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AACtC,QAAMC,OAAO,GAAG,CACZ;AACIC,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GADY,EAKZ;AACID,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GALY,EASZ;AACID,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GATY,EAaZ;AACID,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GAbY,EAiBZ;AACID,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GAjBY,EAqBZ;AACID,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GArBY,EAyBZ;AACID,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GAzBY,EA6BZ;AACID,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GA7BY,EAiCZ;AACID,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,EAAE,EAAE;AAFR,GAjCY,CAAhB;AAsCA,QAAMC,UAAU,GAAGH,OAAO,CAACI,MAAR,CAAeJ,OAAf,CAAnB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMc,KAAK,GAAGF,KAAK,IAAI;AACnBC,IAAAA,QAAQ,CAACE,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUH,KAAV,CAAT,CAAR;AACH,GAFD;;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,KAAK,IAAIA,KAAK,CAACI,MAAN,KAAiB,CAA9B,EAAiC;AAC7BC,MAAAA,UAAU,CAAC,MAAM;AACbJ,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,OAFS,EAEP,IAFO,CAAV;;AAGA,UAAID,KAAK,CAAC,CAAD,CAAL,KAAaA,KAAK,CAAC,CAAD,CAAtB,EAA2B;AACvBR,QAAAA,SAAS,CAACW,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAT;AACH;AACJ;AACJ,GATQ,EASN,CAACH,KAAD,CATM,CAAT;AAWAF,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAEQJ,UAAU,CAACU,GAAX,CAAeZ,MAAM,iBAAI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,MAAZ;AAAoB,QAAA,KAAK,EAAEQ;AAA3B;AAAA;AAAA;AAAA;AAAA,cAAzB;AAFR;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AASH,CArEM;;GAAMX,S;;KAAAA,S","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./GameBoard.scss\"\nimport {Card} from \"../Card/Card\";\n\nexport const GameBoard = ({setPoints}) => {\n    const figures = [\n        {\n            figure: \"😇\",\n            id: 1\n        },\n        {\n            figure: \"😡\",\n            id: 2\n        },\n        {\n            figure: \"🤡\",\n            id: 3\n        },\n        {\n            figure: \"👻\",\n            id: 4\n        },\n        {\n            figure: \"🐵\",\n            id: 5\n        },\n        {\n            figure: \"🐹\",\n            id: 6\n        },\n        {\n            figure: \"🐯\",\n            id: 7\n        },\n        {\n            figure: \"🦧\",\n            id: 8\n        },\n        {\n            figure: \"🐍\",\n            id: 9\n        }]\n\n    const figuresArr = figures.concat(figures)\n    console.log(figuresArr)\n\n    const [index, setIndex] = useState([])\n\n    const getID = index => {\n        setIndex(prev => [...prev, index])\n    }\n\n    useEffect(() => {\n        if (index && index.length === 2) {\n            setTimeout(() => {\n                setIndex([])\n            }, 3500)\n            if (index[0] === index[1]) {\n                setPoints(prev => prev + 1)\n            }\n        }\n    }, [index])\n\n    console.log(index)\n    return (\n        <>\n            <div className=\"game__board\">\n                {\n                    figuresArr.map(figure => <Card card={figure} getID={getID}/>)\n                }\n            </div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}